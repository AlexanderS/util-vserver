dnl $Id$

dnl Copyright (C) 2003 Enrico Scholz <enrico.scholz@informatik.tu-chemnitz.de>
dnl  
dnl This program is free software; you can redistribute it and/or modify
dnl it under the terms of the GNU General Public License as published by
dnl the Free Software Foundation; either version 2, or (at your option)
dnl any later version.
dnl  
dnl This program is distributed in the hope that it will be useful,
dnl but WITHOUT ANY WARRANTY; without even the implied warranty of
dnl MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
dnl GNU General Public License for more details.
dnl  
dnl You should have received a copy of the GNU General Public License
dnl along with this program; if not, write to the Free Software
dnl Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
dnl  
dnl  
dnl As a special exception to the GNU General Public License, if you
dnl distribute this file as part of a program that contains a configuration
dnl script generated by Autoconf, you may include it under the same
dnl distribution terms that you use for the rest of that program.
dnl  

AC_PREREQ(2.57)
AC_INIT(util-vserver, 0.23.190.1, enrico.scholz@informatik.tu-chemnitz.de)
AC_CONFIG_SRCDIR([src/capchroot.c])
AC_CONFIG_HEADER([config.h])

AM_INIT_AUTOMAKE([gnu dist-bzip2 subdir-objects])
AM_MAINTAINER_MODE

AC_SUBST(CVS2CL_TAG, [])

# Checks for programs.
AC_PROG_CXX
AC_PROG_CC
AC_PROG_INSTALL
AC_PROG_LN_S
AC_PROG_RANLIB
AM_PROG_CC_C_O

check_paths=$PATH:/sbin:/usr/sbin:/usr/local/sbin
AC_PATH_PROGS(AWK,     [awk],     [awk],         [ $check_paths ])
AC_PATH_PROGS(GREP,    [grep],    [grep],        [ $check_paths ])
AC_PATH_PROGS(IP,      [ip],      [ip],          [ $check_paths ])
AC_PATH_PROGS(MOUNT,   [mount],   [/bin/mount],  [ $check_paths ])
AC_PATH_PROGS(UMOUNT,  [umount],  [/bin/umount], [ $check_paths ])
AC_PATH_PROGS(NICE,    [nice],    [nice],        [ $check_paths ])
AC_PATH_PROGS(VCONFIG, [vconfig], [vconfig],     [ $check_paths ])
AC_PATH_PROGS(WC,      [wc],      [wc],          [ $check_paths ])

AC_CHECK_PROGS(CVS2CL, [cvs2cl])
AM_CONDITIONAL(HAVE_CVS2CL,  [test x"$CVS2CL" != x])

AC_CHECK_PROGS(RCS2LOG, [rcs2log])
AM_CONDITIONAL(HAVE_RCS2LOG,  [test x"$RCS2LOG" != x])

ENSC_CHECK_CC_FLAG([-std=c99 -Wall -pedantic -W])

AC_MSG_CHECKING([whether to enable dietlibc])
AC_ARG_ENABLE([dietlibc],
	      [AC_HELP_STRING([--disable-dietlibc],
			      [do not use dietlibc (default: use dietlibc)])],
	      [case "$withval" in
		  yes)	use_dietlibc=forced;;
		  no)	use_dietlibc=forced_no;;
		  *)	AC_MSG_ERROR(['$withval' is not a valid value for --enable-dietlibc]);;
	       esac],
	      [: ${DIET:=diet}
	       which "$DIET" >/dev/null 2>/dev/null && use_dietlibc=detected || use_dietlibc=detected_no])

case x"$use_dietlibc" in
    xdetected)
	AM_CONDITIONAL(USE_DIETLIBC, true)
	AC_MSG_RESULT([yes (autodetected)])
	;;
    xforced)
	AM_CONDITIONAL(USE_DIETLIBC, true)
	AC_MSG_RESULT([yes (forced)])
	;;
    xdetected_no)
	AM_CONDITIONAL(USE_DIETLIBC, false)
	AC_MSG_RESULT([no (detected)])
	;;
    xforced_no)
	AM_CONDITIONAL(USE_DIETLIBC, false)
	AC_MSG_RESULT([no (forced)])
	;;
    *)
	AC_MSG_ERROR([internal error, use_dietlibc was "$use_dietlibc"])
	;;
esac

AC_ARG_VAR(CC, [The C compiler])
AC_MSG_CHECKING([for linux kernel headers])
AC_ARG_WITH([kerneldir],
	    [AC_HELP_STRING([--with-kerneldir=DIR],
                            [assume top-kernelsources in DIR (default: /lib/modules/<current>/build)])],
            [case "$withval" in
		yes|no)	AC_MSG_ERROR(['$withval' is not a valid value for kerneldir]);;
		*)	kerneldir=$withval;;
	     esac],
	    [kerneldir=
	     for i in /lib/modules/$(uname -r)/build /usr/src/linux /usr; do
		test -e $i/include/linux/version.h && { kerneldir=$i; break; }
	     done])

test "$kerneldir" -a -e $i/include/linux/version.h || {
	AC_MSG_ERROR([Can not find kernelsources])
}

kernelincludedir=$kerneldir/include
AC_SUBST(kernelincludedir)
AC_MSG_RESULT($kernelincludedir/linux)

AC_MSG_CHECKING([for supported APIs])
AC_ARG_ENABLE([apis],
	      [AC_HELP_STRING([--enable-apis=APIS],
			      [enable support for the given apis; possible values are: legacy,compat,ALL (default: ALL)])],
              [],
	      [supported_apis=ALL])

test x"$supported_apis" != xALL || supported_apis='legacy,compat'
old_IFS=$IFS
IFS=,;
for i in $supported_apis; do
	case "$i" in
		compat)	AC_DEFINE(VC_ENABLE_API_COMPAT, 1, [Enable support for compatibily syscall API]);;
		legacy) AC_DEFINE(VC_ENABLE_API_LEGACY, 1, [Enable support for old, /proc parsing API]);;
		*)	AC_MSG_ERROR(['$i' is not a supported API]);;
	esac
done
IFS=$old_IFS
AC_MSG_RESULT([$supported_apis])

AC_CHECK_FUNCS([sys_virtual_context])
AC_CHECK_DECLS(MS_MOVE,,,[#include <linux/fs.h>])
AC_CHECK_TYPES(ctx_t,,,[#include <sys/types.h>])

dnl BIG HACK! Do some autodetection here!
AC_DEFINE(UTMP_GID, [22], [The utmp gid-number])

if false; then
	AC_DEFINE(HAVE_GROWING_STACK, [1], [Define to 1 if the stack is on growing addresses])
fi


AC_CONFIG_FILES([util-vserver.spec Makefile distrib/Makefile])
AC_OUTPUT
